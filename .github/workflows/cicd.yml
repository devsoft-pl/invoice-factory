---
name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (black, flake8, isort)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install lint dependencies
        run: pip install -r requirements-lint.txt

      - name: Lint
        run: |
          black --check .
          flake8 .
          isort --check-only .

  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: "abc"
      DATABASE_URL: "sqlite://test.db"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          pipx install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'

      - name: Install poetry dependencies
        run: poetry install --no-interaction

      - name: Pytest
        run: |
          poetry run python manage.py test

  release:
    name: Release new version
    runs-on: ubuntu-latest
    needs: [ test, lint ]
    if: github.ref == 'refs/heads/master'
    permissions:
      id-token: write
      contents: write
    outputs:
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - run: pip install python-semantic-release

      - name: Python Semantic Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Set git details
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@devsoft.pl"

          # run semantic-release
          NEW_VERSION=$(semantic-release version --print)
          semantic-release version --vcs-release
          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ vars.DISCORD_WEBHOOK }}
          VERSION: ${{ steps.release.outputs.version }}
        uses: Ilshidur/action-discord@08d9328877d6954120eef2b07abbc79249bb6210
        with:
          args: "`${{ github.repository }}` New version `${{ env.VERSION }}` has been released! :tada:"

  build:
    name: Build image (ghcr.io)
    if: github.ref == 'refs/heads/master'
    needs: release
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with GitHub Actions cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy with ArgoCD
    needs: [release, build]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gitops repo
        uses: actions/checkout@v4
        with:
          repository: devsoft-pl/gitops
          ref: master
          token: ${{ secrets.GITOPS_DEPLOYER }}

      - name: Update container tag to new version
        run: |
          YAML_FILE=argocd/apps/invoice-factory.yaml
          IMAGE_TAG="${{ needs.release.outputs.version }}"
          yq -i ".spec.source.helm.values |= (from_yaml | .image.tag=\"$IMAGE_TAG\" | to_yaml)" ${YAML_FILE}

      - name: Update tag and commit version
        env:
          GH_TOKEN: ${{ secrets.GITOPS_DEPLOYER }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "ci: deploy ${{ github.repository }}:${{ needs.release.outputs.version }}"
          git push

  notify:
    name: Notify Discord
    needs: deploy
    if: false  # This job is disabled.
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ vars.DISCORD_WEBHOOK }}
          VERSION: ${{ steps.meta.outputs.version }}
        uses: Ilshidur/action-discord@08d9328877d6954120eef2b07abbc79249bb6210
        with:
          args: "`${{ github.repository }}` New version `${{ env.VERSION }}` has been deployed! :rocket:"

